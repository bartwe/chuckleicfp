#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Jul  7 16:15:07 2012

import wx, sys, os, threading, time

from pprint import pprint

from ctypes import *

import libloader

libicfp = libloader.LoadLibrary()

# begin wxGlade: extracode
# end wxGlade


class Projection(wx.Control):
    def __init__(self, *a, **kw):
        wx.Control.__init__(self, *a, **kw)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_CHAR, self.OnKey)

        imgdir = os.path.join(os.path.dirname(__file__), 'images')
        self.bmp = {}
        self.bmp[' '] =  wx.Bitmap(imgdir + '/empty.png')
        self.bmp['#'] =  wx.Bitmap(imgdir + '/wall.png')
        self.bmp['*'] =  wx.Bitmap(imgdir + '/rock.png')
        self.bmp['R'] =  wx.Bitmap(imgdir + '/robot.png')
        self.bmp['L'] =  wx.Bitmap(imgdir + '/lift.png')
        self.bmp['.'] =  wx.Bitmap(imgdir + '/earth.png')
        self.bmp['\\'] = wx.Bitmap(imgdir + '/lambda.png')
        self.bmp['O'] =  wx.Bitmap(imgdir + '/lift-open.png')
        self.bmp['W'] =  wx.Bitmap(imgdir + '/beard.png')
        self.bmp['!'] =  wx.Bitmap(imgdir + '/razor.png')
        bittarget = wx.Bitmap(imgdir + '/target.png')
        for target in "123456789":
            self.bmp[target] = bittarget
        bittramp =   wx.Bitmap(imgdir + '/tramp.png')
        for trampoline in "ABCDEFGHI":
            self.bmp[trampoline] = bittramp

        if len(sys.argv) > 1:
            fn = sys.argv[1]
        else:
            fn = None
        self.fn = fn
        self.data = libicfp.Init(fn)
        xx = c_int()
        yy = c_int()
        self.maze = libicfp.GetData(self.data, pointer(xx), pointer(yy))

        self.x = xx.value
        self.y = yy.value

        self.safezone = None
        self.command = ''
        self.bestcommand = None

        print self.x, self.y

    def clean(self):
        self.data.Clean()

    def replayTheBest(self):
        self.data = libicfp.Init(self.fn)
        xx = c_int()
        yy = c_int()
        self.maze = libicfp.GetData(self.data, pointer(xx), pointer(yy))
        for c in self.bestcommand:
            libicfp.DoMove(self.data, c)
        self.command = self.bestcommand

    def OnPaint(self, e):
        if self.bestcommand is not None:
            self.replayTheBest()

        dc = wx.PaintDC(self)
        p = self.GetParent()

        buf = (c_char * 1024)()
        waterlevel = c_int()
        libicfp.GetInfo(self.data, buf, 1024, waterlevel)
        waterlevel = waterlevel.value
        info = buf.value

        STATUSLINE = 30
        BMS = 10
        for x in range(self.x):
            for y in range(self.y):
                cellidx = (self.y-y-1)*self.x + x
                cell = self.maze[cellidx]
                dc.DrawBitmap(self.bmp[cell], x*BMS, STATUSLINE + y*BMS)
                if self.safezone is not None:
                    if ord(self.safezone[cellidx]):
                        dc.DrawBitmap(self.bmp['R'], x*BMS, STATUSLINE + y*BMS)

        dc.DrawLabel(info, (0, 0, 200, 15))
        dc.DrawLabel(self.command, (0, 15, 200, 15))
        waterlevelpix = STATUSLINE + BMS * (self.y-waterlevel)
        dc.SetPen(wx.Pen('BLUE', 3))
        dc.DrawLine(0, waterlevelpix, self.x*BMS, waterlevelpix)


    def OnKey(self, e):
        kc = e.GetKeyCode()
        char = unichr(kc)
        p = self.GetParent()

        kc2cmd = {
                wx.WXK_UP: 'U',
                wx.WXK_DOWN: 'D',
                wx.WXK_LEFT: 'L',
                wx.WXK_RIGHT: 'R',
                }

        BACKSPACE = '\x08'

        def do(c):
            if c == BACKSPACE:
                if not self.command:
                    return # do nothing
                self.command = self.command[:-1]
            else:
                self.command += c

            libicfp.DoMove(self.data, c)

        if kc in kc2cmd:
            do(kc2cmd[kc])
        elif char.lower() in 'aws\x08':
            do(str(char.upper()))
        elif char.lower() == ' ':
            if self.fn is None:
                raise Exception("Filename required for this")
            print 'go for it...'
            libicfp.GoForIt(self.data)
            print 'going for it...'
            self.bestcommand = None
            threading.Thread(target=self.checkForBest).start()
        elif char.lower() == 's':
            if self.safezone is None:
                self.safezone = libicfp.GetSafeZone(self.data)
            else:
                self.safezone = None
        else:
            print 'Unknown key: %d (%r)' % (kc, char)
            e.Skip()
            return

        self.Refresh()

    def checkForBest(self):
        while True:
            time.sleep(.1)
            bestcommand = libicfp.GetBest()
            if bestcommand != self.bestcommand:
                print 'Better best:', bestcommand
                self.bestcommand = bestcommand
                self.Refresh()

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE | wx.FULL_REPAINT_ON_RESIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.projection = Projection(self, -1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("ICFP 2012 viewer")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.projection, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = MyFrame(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
